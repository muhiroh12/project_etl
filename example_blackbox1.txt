import pandas as pd
import glob
import sqlalchemy

class DataReader:
    def __init__(self, file_path, file_type):
        self.file_path = file_path
        self.file_type = file_type

    def read_data(self):
        if self.file_type == 'csv':
            try:
                # Use pd.read_csv with skip_blank_lines=True to skip blank lines in the CSV file
                df = pd.read_csv(self.file_path, skip_blank_lines=True)
                return df
            except Exception as e:
                print(f"Error reading CSV file: {e}")
                return None
        elif self.file_type == 'excel':
            try:
                # Use pd.read_excel to read Excel file
                df = pd.read_excel(self.file_path)
                return df
            except Exception as e:
                print(f"Error reading Excel file: {e}")
                return None
        # Add more file types as needed

class DataCleaner:
    def __init__(self, df):
        self.df = df

    def clean_data(self):
        # Break down the cleaning process into smaller methods
        self.df = self.remove_unnamed_columns()
        self.df = self.convert_date_columns()
        self.df = self.remove_null_rows()
        return self.df

    def remove_unnamed_columns(self):
        # Remove unnamed columns
        return self.df.loc[:, ~self.df.columns.str.contains('^Unnamed')]

    def convert_date_columns(self):
        # Use pd.to_datetime to convert date columns to datetime format
        date_columns = ['date_column1', 'date_column2']
        for column in date_columns:
            self.df[column] = pd.to_datetime(self.df[column])
        return self.df

    def remove_null_rows(self):
        # Remove rows with null values
        return self.df.dropna()

class DatabaseLoader:
    def __init__(self, engine, table_name):
        self.engine = engine
        self.table_name = table_name

    def load_data_to_database(self, df):
        try:
            # Use with statement to ensure that database connections are closed
            with self.engine.connect() as connection:
                # Use if_exists='replace' instead of if_exist='replace'
                df.to_sql(name=self.table_name, con=connection, index=False, if_exists='replace')
        except Exception as e:
            print(f"Error loading data to database: {e}")

def main():
    # Define a list of files to read, along with their file types and table names
    files_to_read = [
        {'file_path': 'data/file1.csv', 'file_type': 'csv', 'table_name': 'table1'},
        {'file_path': 'data/file2.xlsx', 'file_type': 'excel', 'table_name': 'table2'},
        # Add more files as needed
    ]

    # Create a database engine
    engine = sqlalchemy.create_engine('database_connection_string')

    # Read and load each file
    for file in files_to_read:
        data_reader = DataReader(file['file_path'], file['file_type'])
        df = data_reader.read_data()
        if df is not None:
            data_cleaner = DataCleaner(df)
            df = data_cleaner.clean_data()
            database_loader = DatabaseLoader(engine, file['table_name'])
            database_loader.load_data_to_database(df)

if __name__ == "__main__":
    main()